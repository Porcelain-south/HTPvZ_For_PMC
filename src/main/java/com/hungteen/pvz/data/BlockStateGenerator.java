package com.hungteen.pvz.data;

import com.hungteen.pvz.PVZMod;
import com.hungteen.pvz.common.block.BlockRegister;
import com.hungteen.pvz.common.block.plants.CabbageBlock;
import com.hungteen.pvz.common.block.plants.CornBlock;
import com.hungteen.pvz.common.block.plants.ToxicShroomBlock;
import com.hungteen.pvz.utils.StringUtil;
import com.mojang.datafixers.util.Pair;
import net.minecraft.block.Block;
import net.minecraft.data.DataGenerator;
import net.minecraft.state.Property;
import net.minecraft.state.properties.BlockStateProperties;
import net.minecraftforge.client.model.generators.BlockStateProvider;
import net.minecraftforge.client.model.generators.ConfiguredModel;
import net.minecraftforge.common.data.ExistingFileHelper;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * NO USE
 */
public class BlockStateGenerator extends BlockStateProvider {

	private Set<Block> addedBlocks = new HashSet<>();
	
	public BlockStateGenerator(DataGenerator gen, ExistingFileHelper exFileHelper) {
		super(gen, PVZMod.MOD_ID, exFileHelper);
	}

	@Override
	protected void registerStatesAndModels() {
		//special model generated by blockbench.
		addedBlocks.addAll(Arrays.asList(BlockRegister.CARD_FUSION_TABLE.get(), BlockRegister.CHOMPER.get(), BlockRegister.DIAMOND_SUNFLOWER_TROPHY.get(),
				BlockRegister.ESSENCE_ALTAR.get(), BlockRegister.FLOWER_POT.get(), BlockRegister.GOLD_SUNFLOWER_TROPHY.get(), BlockRegister.LANTERN.get(), 
				BlockRegister.LILY_PAD.get(), BlockRegister.SILVER_SUNFLOWER_TROPHY.get(), BlockRegister.STEEL_LADDER.get(), BlockRegister.SUN_CONVERTER.get()
				
				));
		//crops
		Arrays.asList(
				Pair.of(BlockRegister.PEA_PLANT.get(), BlockStateProperties.AGE_3),
				Pair.of(BlockRegister.TOXIC_SHROOM.get(), ToxicShroomBlock.AGE),
				Pair.of(BlockRegister.CABBAGE.get(), CabbageBlock.AGE),
				Pair.of(BlockRegister.CORN.get(), CornBlock.AGE)
		).forEach(pair -> {
			cropBlockState(pair.getFirst(), pair.getSecond());
		});
		//last step for all normal block models.
		for(Block b : ForgeRegistries.BLOCKS) {
			if(b.getRegistryName().getNamespace().equals(PVZMod.MOD_ID) && ! addedBlocks.contains(b)) {
				simpleBlock(b);
			}
		}
	}
	
	private void cropBlockState(Block block, Property<Integer> p) {
		getVariantBuilder(block).forAllStates(state -> {
			int i = state.getValue(p);
			return ConfiguredModel.builder()
					.modelFile(models().crop(block.getRegistryName().getPath() + "_" + i, StringUtil.prefix("block/" + block.getRegistryName().getPath() + "_" + i)))
					.build();
		});
		this.addedBlocks.add(block);
	}
	
//	private void horizontalBlockState(Block block) {
//		ModelFile file = models().cubeAll(block.getRegistryName().getPath(), StringUtil.prefix("block/" + block.getRegistryName().getPath()));
//		horizontalBlock(block, file);
//	}
	
	@Override
	public String getName() {
		return "Plants vs Zombies blockstates";
	}

}
